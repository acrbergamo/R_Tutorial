a <- 10
a
b <- "Hello world!"
a
c <- 5
d <- a + c
lista <- e(1,3,5,7,11)
b1 <- "Hello"
b2 <- " World!"
b12 <- b1+b2
d
b3 <- b1+b2
b4 <- b4(b1,b2)
b4 <- c(b1,b2)
b4
# Help
?c
a1 <- 10
a1 <- 1
a2 <- 3
a3 <- 5
a4 <- 7
a5 <- a1 + a2
a6 <- a4 - a3
b3 <- b1+b2
# Texto
b <- "Hello world!"
b1 <- "Hello"
b2 <- " World!"
b3 <- c(b1,b2)
b3[1]
?summary
a7 <- c(a1,a2,a3)
a7[2]
summary(a7)
# Função de um pacote não padrão
?str_c
# Função de um pacote não padrão
?str_c
install.packages("stringr")
# Sumario
?summary
library(stringr)
# Função de um pacote não padrão
?str_c
# Função de um pacote não padrão
?str_c
library(stringr)
library(stringr)
install.packages("stringr")
library(stringr)
install.packages("stringr")
install.packages("stringr")
# Função de um pacote não padrão
?str_c
# Função de um pacote não padrão
?str_c
library(stringr)
install.packages("stringr", repos = "http://cran.us.r-project.org")
install.packages("stringr")
#-----------
install.packages("rlang")
install.packages("lifecycle")
remove.packages(c("rlang", "lifecycle"))
# Função de um pacote não padrão
?str_c
install.packages("stringr")
#-----------
install.packages("rlang")
install.packages("lifecycle")
R.version.string
# Função de um pacote não padrão
?str_c
library(stringr)
install.packages("stringr")
install.packages("lifecycle")
remove.packages("lifecycle")
remove.packages("rlang")
1+1
remove.packages("lifecycle")
remove.packages("rlang")
#-----------
install.packages("rlang")
remove.packages("lifecycle")
1+1
install.packages("lifecycle")
install.packages("rlang")
install.packages("lifecycle")
install.packages("lifecycle", version = "1.0.0")
install.packages("lifecycle", force = TRUE)
# Sumario
?summary
# Função de um pacote não padrão
?str_c
library(stringr)
library(r-stringr)
print("Hello worl!")
1+4
3*4
a = 3
b = 4
a+b
a*b
install.packages("rlang")
install.packages("lifecycle", force = TRUE)
install.packages("lifecycle", dependencies = FALSE)
?sumarry
?sumary
?summary
?str_c
install.packages("stringr")
?str_c
library(stringr)
?str_c
Nome <- "Joao"
Sobrenome <-"Silva"
NomeCompleto <- str_c(Nome, Sobrenome)
NomeCompleto
NomeCompleto <- str_c(Nome," ", Sobrenome)
NomeCompleto
#Soma
5 + 5
5+2*2
5-1/2
# Divisao
9/3
# Divisao
9/3
# Multiplicacao
4 * 2
#Potencia
4 ** 2
4 ^ 2
#Igual?
4 == 2
#Igual?
4 == 2
4 == 4
# Diferente?
4 != 2
4 != 4
# Maior?
4 > 2
4 > 8
# Menor
4 < 2
# Menor
4 < 2
4 < 8
# Maior ou Igual?
4 >= 2
4 >= 4
# Menor ou Igual?
4 <= 2
4 <= 4
# E
4 == 4
4 =
4 = 4
# E
4 == 4
4 == 2
4 == 4 & 8 == 16
4 == 4 & 8 != 8
4 == 4 & 8 != 16
4 > 2 & 8 < 16
# OU
6 == 6
# OU
4 == 4
8 == 16
4 == 8 | 8 == 16
4 == 8 | 8 != 16
4 > 2 | 8 > 16
# Negacao
!6 == 6
!4 > 2
!4 < 2
Salario <- 3450.89
Horas <- 220
SH <- Salario/Horas
SH
SH <- as.integer(Salario/Horas)
SH <- Salario/Horas
SHi <- as.integer(Salario/Horas)
Shi = 5
SHr <- round(Salario/Horas)
Numeros1 <- Salario + Horas
Numeros2 <- c(Salario, Horas)
Numeros2
Numeros1
Nome_1 <- "Eduardo Abreu"
Nome_2 <- "Amanda Lopes"
Idade + 5
Idade + 5
Idade <- "25"
Idade + 5
Nomes <- Nome_1 + Nome_2
Nomes <- c(Nome_1, Nome_2)
Nomes
Nomes[1]
Nomes[2]
Nome_1 == Nome_2
Nome_1 != Nome_2
class(Nomes)
class(Idade)
class(SH)
class(SHi)
class(SHr)
class(Numeros1)
class(Numeros2)
Numeros2 <- c(Salario, Horas)
Numeros2
CargaHoraria <- c(220, 220, 150, 100, 100)
summary(CargaHoraria)
summary(Idade)
CargaHoraria <- as.factor(CargaHoraria)
summary(CargaHoraria)
mode(CargaHoraria)
class(CargaHoraria)
L1 <- Salario > Horas
# OBJETIVO: entender como a linguagem R organiza os dados
# COMO?
# Exemplo
# Armazenamento numerico
Salario <- 3450.89
Horas <- 220
SH <- Salario/Horas
SHi <- as.integer(Salario/Horas)
SHr <- round(Salario/Horas)
Numeros1 <- Salario + Horas
Numeros2 <- c(Salario, Horas)
class(SH)
class(SHi)
class(SHr)
class(Numeros1)
class(Numeros2)
# Armazenamento de caracteres
Nome_1 <- "Eduardo Abreu"
Nome_2 <- "Amanda Lopes"
Idade <- "25"
Idade + 5
L1 <- Salario > Horas
L1
L2 <- Salario < Horas
L2
Logico <- TRUE
Logico <- "TRUE"
Logico2 <- c(1, FALSE, 3)
Nomes <- c(Nome_1, Nome_2)
# vetor de caracteres
is.vector(Nomes)
mode(Nomes)
#vetor numerico
is.vector(Horas)
mode(Horas)
# vetor logico
is.vector(L1)
mode(L1)
# Lista - vetor com tipos de dados diferentes
a <- c(1, 2, 3, 4, 5)
b <- c(1, "2", 3, 4, 5)
a
b
is.list(a)
is.list(b)
is.vector(a)
is.vector(b)
b <- as.numeric(b)
b
is.list(a)
is.list(b)
is.vector(a)
is.vector(b)
b <- list(10, "2", 8)
is.list(b)
mode(b)
str(b)
e <- list(c(10, 6, 51, 5), "2", 8)
str(e)
is.list(e)
mode(e)
View(e)
View(b)
e[[1]][1]
e[[1]][2]
# Se
if (5 == 5) 6+6
# Se nao
if (5 == 6) 6+5 else "Condicao nao atendida"
"condicao nao atendida"
if (5 == 5) {
6+6
} else {
"condicao nao atendida"
}
# Exemplo
idades <- c(25,30)
nomes <- c("Joao", "Caina")
df <- data.frames(nomes, idades)
df <- data.frame(nomes, idades)
df
if (df$idades[df$nomes=="Joao")] > df$idades[df$nomes=="Caina"]) {
if (df$idades[df$nomes=="Joao"] > df$idades[df$nomes=="Caina"]) {
"Mais velho: Joao"
} else{
"Mais velho: Caina"
}
idades <- c(25,30,24,29,31,12)
nomes <- c("Joao","Caina","Maria","Leo","Lia","Enzo")
df <- data.frame(nomes,idades)
df
print(i)
for (i in idades) {
print(i)
}
# exemplo
y <- 0
# exemplo
v <- 0
for (i in df$idades) {
if (i > v) (v <- i)
}
v
df$nomes[df$idades == v]
# WHILE - enquanto e verdade faca isso
x <- 0
x <- 0
wwhile ( x < 10) {
x <- 0
while ( x < 10) {
print(x)
x <- x+1
}
# exemplo - nao permitir que as somas das idades seja maior que 100
x <- 0
cont <- 0
idades100 <- 0
while (x < 100) {
cont <- cont+1
idades100[cont] <- idades[cont]
# y <- x+idades[cont+1]
}
a <- c(423,464,69,519,123,258)
# funcao somar
x <- 0
x <- 0
for (i in a) {
x <- x+i
}
print(x)
# solucao
x <- 0
x <- 0
for (i in b) {
x <- x +1
}
# e a soma dos valores de b?
b <- c(51,36,123,98,23,37,63,3)
x <- 0
for (i in b) {
x <- x +1
}
print(x)
soma <- function(y) {
x <- 0
for (i in y) {
x <- x +1
}
print(x)
}
soma(a)
soma(b)
view(soma)
view(soma)
View(soma)
soma(a)
soma(b)
soma2 <- function(y,z) {
x <- 0
c <- 0
for (i in y) {
c <- c+1
x <- z[c] + i
print(x)
}
}
soma2(a,b)
soma2(b,a)
a+b
sum(a)
sum(b)
setwd('C:\Users\adria\1Python\Github\R_Tutorial')
setwd('C:/Users\adria\1Python\Github\R_Tutorial')
setwd('C:/Users/adria/1Python/Github/R_Tutorial')
df <- read.csv("FipePrevAjustada.csv", header = TRUE, encoding = "UTF-")
df
view(df)
View(df)
df <- read.csv("fipe_Jun2018.csv", header = TRUE, encoding = "UTF-")
View(df)
str(df)
# excluindo
df$X <- NULL
df$price_reference <- NULL
?names
names(df)
names(df) <- c("Marca","Carro","Ano_Modelo","Combustivel","Preco")
summary(df$Ano_Modelo)
df$Ano_Modelo[df$Ano_Modelo==32000] <- "Zero km"
df$Ano_Modelo <- as.factor(df$Ano_Modelo)
summary(df$Ano_Modelo)
## Preco
summary(df$Preco)
df$Preco <- as.numeric(df$Preco)
df$Preco1 <- as.numeric(df$Preco)
setwd('C:/Users/adria/1Python/Github/R_Tutorial')
df <- read.csv("fipe_Jun2018.csv", header = TRUE, encoding = "UTF-")
View(df)
str(df)
# excluindo
df$X <- NULL
df$price_reference <- NULL
# Renomear variaveis
?names
names(df)
names(df) <- c("Marca","Carro","Ano_Modelo","Combustivel","Preco")
# Mudar tipo das variavesi
## Ano_Modelo
summary(df$Ano_Modelo)
df$Ano_Modelo[df$Ano_Modelo==32000] <- "Zero km"
df$Ano_Modelo <- as.factor(df$Ano_Modelo)
summary(df$Ano_Modelo)
str(df$Ano_Modelo)
## Preco
summary(df$Preco)
df$Preco1 <- as.numeric(df$Preco)
df$Preco <- NULL
setwd('C:/Users/adria/1Python/Github/R_Tutorial')
df <- read.csv("fipe_Jun2018.csv", header = TRUE, encoding = "UTF-")
View(df)
str(df)
# excluindo
df$X <- NULL
df$price_reference <- NULL
# Renomear variaveis
?names
names(df)
names(df) <- c("Marca","Carro","Ano_Modelo","Combustivel","Preco")
# Mudar tipo das variavesi
## Ano_Modelo
summary(df$Ano_Modelo)
df$Ano_Modelo[df$Ano_Modelo==32000] <- "Zero km"
df$Ano_Modelo <- as.factor(df$Ano_Modelo)
summary(df$Ano_Modelo)
str(df$Ano_Modelo)
## Preco
View(df)
df$Preco1 <- NULL
?gsub
df$Preco1 <- gsub("R\\$|\\.| ","",df$Preco)
df$Preco <- gsub("R\\$|\\.| ","",df$Preco)
df$Preco1 <- NULL
df$Preco <- as.numeric(gsub("\\,".".",df$Preco))
df$Preco <- as.numeric(gsub("\\,",".",df$Preco))
summary(df$Preco)
# Conclusao
str(df)
write.table(df,file="FipeTransformada.csv",row.names=FALSE,sep=",",fileEncoding = "UTF-8" )
